 Thay vì sử dụng Comparator để so sánh các mục trong 
giỏ hàng, chúng ta có thể sử dụng giao diện Comparable và ghi đè phương thức 
compareTo(). Giả sử chúng ta đang áp dụng Comparable interface approach. 
 Lớp nào nên triển khai giao diện Comparable? 
 Lớp nên triển khai giao diện Comparable là lớp chứa đối tượng mà bạn 
muốn so sánh, trong trường hợp này, là abstract class “Media”. 
 Trong các lớp đó, phải triển khai phương thức compareTo() như thế nào để 
phản ánh đúng thứ tự mà chúng ta muốn? 
 Để triển khai phương thức compareTo() thì cần so sánh các thuộc tính của 
đối tượng. Đối với yêu cầu sắp xếp theo title sau đó là cost, có thể triển khai 
như sau:  
@Override 
public int compareTo(Media other) { 
if (!this.getTitle().equals(other.getTitle())) { 
return this.getTitle().compareTo(other.getTitle()); 
} else { 
return Double.compare(this.getCost(), other.getCost()); 
} 
} 
 Liệu có thể có hai quy tắc sắp xếp (theo title sau đó là cost và theo cost sau 
đó là title) nếu sử dụng cách tiếp cận này với giao diện Comparable? 
 Không, với giao diện Comparable, bạn chỉ có thể có một quy tắc sắp xếp cho 
mỗi lớp. Điều này là do phương thức compareTo() chỉ trả về một giá trị int. 
 Giả sử các đĩa DVD có một quy tắc sắp xếp khác biệt so với các loại phương 
tiện khác, tức là theo tiêu đề, sau đó là độ dài giảm dần, sau đó là giá. Bạn sẽ 
làm thế nào để điều chỉnh mã của mình để cho phép điều này? 
 Có thể tạo một lớp riêng cho DVD và triển khai phương thức compareTo(): 
public class DVD extends Media implements Comparable<DVD> { 

@Override 

 

 
    public int compareTo(DVD other) { 
        if (!this.getTitle().equals(other.getTitle())) { 
            return this.getTitle().compareTo(other.getTitle()); 
        } else if (this instanceof DVD && other instanceof DVD) { 
            return Integer.compare(((DVD) other).getLength(), ((DVD) 
this).getLength()); 
        } else { 
            return Double.compare(this.getCost(), other.getCost()); 
        } 
    } 
} 
